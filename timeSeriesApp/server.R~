library(shiny)
library(wtss.R)
source("helpers.R")

shinyServer
(  function(input, output, session)
   {  # Parse URL
      parse_URL <- function()
      {  args = substr(session$clientData$url_search, 2, nchar(session$clientData$url_search))
         aux = unlist(strsplit(args, '&'))
         titles = c()
         values = c()
         for(i in 1:length(aux))
         {  pair = unlist(strsplit(aux[i], '='))
            titles[i] = pair[1]
            values[i] = pair[2]
         }
         names(values) = titles
         values
      }
      
      # Get server
      get_server <- reactive (
        {  WTSS(parse_URL()["server"])  }
      )
      
      # Get coverage
      get_coverage <- reactive (
        {  cov = parse_URL()["cov"]
            if(nchar(cov) > 0)
            {  describeCoverage(get_server(), cov)  }
         }
      )
      
      # Format dates according they are in the coverage
      formatted_dates <- reactive (
        {  args = parse_URL()
            dates = c(args["start"], args["end"])
            coverage = get_coverage()
            if(length(coverage) > 0)
            {  cov = get(args["cov"], coverage)
               if(class(cov) != "try-error")
               {  cov_temporal = cov$geo_extent$temporal
                  dates[1] = substr(args["start"], 1, nchar(cov_temporal$start))
                  dates[2] = substr(args["end"], 1, nchar(cov_temporal$end))
               }
            }
            dates
         }
      )
      
      # Get time series
      get_ts <- reactive (
         {  args = parse_URL()
            timeSeries(get_server(), args["cov"], args["attr"], latitude=args['y'], longitude=args['x'], start=formatted_dates()[1], end=formatted_dates()[2])
         }
      )
      
      # Get selected option
      selected_option <- reactive (
        {  time_series = get_attributes(get_ts())
            series <- switch (
              parse_URL()["option"],
               "time_series" = time_series,
               "bfast01(time_series)" = apply_bfast01(time_series),
               "bfast(time_series)" = apply_bfast(time_series),
               "bfastmonitor(time_series)" = apply_bfastmonitor(time_series),
               "twdtw(time_series)" = apply_twdtw(time_series)
            )
            series
         }
      )
      
      # Plot time series
      output$plot <- renderPlot (
        {  series = selected_option()
            if(parse_URL()["option"] == "twdtw(time_series)")
            {  plot(series, type="alignments")  }
            else
            {  plot(series)  }
         }
      )
      
   }
)

